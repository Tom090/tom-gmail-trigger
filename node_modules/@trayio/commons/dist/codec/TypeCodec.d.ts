import * as E from 'fp-ts/lib/Either';
import * as t from 'io-ts';
import { Codec } from './Codec';
export declare class TypeCodec<T> implements Codec<T> {
    static fromDescriptor<T>(descriptor: t.Type<T, unknown>): Codec<T>;
    static undefined: Codec<undefined>;
    static unknown: Codec<unknown>;
    static emptyRecord: Codec<{}>;
    static stringRecord: Codec<Record<string, string>>;
    static partialRecord: <K extends Record<string, unknown>, G extends t.Any>(k: t.KeyofType<K>, type: G) => t.PartialC<Record<string, G>>;
    private descriptor;
    private constructor();
    encode(value: T): unknown;
    decode(value: unknown): E.Either<Error, T>;
}
//# sourceMappingURL=TypeCodec.d.ts.map