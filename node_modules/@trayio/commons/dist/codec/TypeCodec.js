"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeCodec = void 0;
const E = __importStar(require("fp-ts/lib/Either"));
const t = __importStar(require("io-ts"));
const io_ts_reporters_1 = __importDefault(require("io-ts-reporters"));
const Record_1 = require("fp-ts/Record");
const function_1 = require("fp-ts/function");
class TypeCodec {
    static fromDescriptor(descriptor) {
        return new TypeCodec(descriptor);
    }
    static undefined = TypeCodec.fromDescriptor(t.undefined);
    static unknown = TypeCodec.fromDescriptor(t.unknown);
    static emptyRecord = TypeCodec.fromDescriptor(t.type({}));
    static stringRecord = TypeCodec.fromDescriptor(t.record(t.string, t.string));
    // Added support for partial records as IO-TS does not support them
    // https://github.com/gcanti/io-ts/issues/429#issuecomment-862472408
    static partialRecord = (k, type) => t.partial((0, Record_1.map)(() => type)(k.keys));
    descriptor;
    constructor(descriptor) {
        this.descriptor = descriptor;
    }
    encode(value) {
        return this.descriptor.encode(value);
    }
    decode(value) {
        const result = this.descriptor.decode(value);
        const report = io_ts_reporters_1.default.report(result);
        return (0, function_1.pipe)(result, E.mapLeft((e) => new Error(report.join(', '))));
    }
}
exports.TypeCodec = TypeCodec;
