"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const E = __importStar(require("fp-ts/Either"));
const O = __importStar(require("fp-ts/Option"));
const t = __importStar(require("io-ts"));
const io_ts_types_1 = require("io-ts-types");
const TypeCodec_1 = require("./TypeCodec");
const Codec_abstract_test_1 = require("./Codec.abstract.test");
const testTypeCodec = TypeCodec_1.TypeCodec.fromDescriptor(t.type({
    strField: t.string,
    intField: (0, io_ts_types_1.optionFromNullable)(t.number),
}));
(0, Codec_abstract_test_1.testCodec)(testTypeCodec);
describe('Type Codec Test', () => {
    test('should encode option some without the extra layer', () => {
        const testValue = {
            strField: 'str',
            intField: O.some(123),
        };
        const result = testTypeCodec.encode(testValue);
        const expected = {
            strField: 'str',
            intField: 123,
        };
        expect(result).toStrictEqual(expected);
    });
    test('should encode option none without the extra layer', () => {
        const testValue = {
            strField: 'str',
            intField: O.none,
        };
        const result = testTypeCodec.encode(testValue);
        const expected = {
            strField: 'str',
            intField: null,
        };
        expect(result).toStrictEqual(expected);
    });
    test('should decode option some without the extra layer', () => {
        const testValueEncoded = {
            strField: 'str',
            intField: 123,
        };
        const result = testTypeCodec.decode(testValueEncoded);
        const expected = E.right({
            strField: 'str',
            intField: O.some(123),
        });
        expect(result).toStrictEqual(expected);
    });
    test('should decode option none without the extra layer from null', () => {
        const testValueEncoded = {
            strField: 'str',
            intField: null,
        };
        const result = testTypeCodec.decode(testValueEncoded);
        const expected = E.right({
            strField: 'str',
            intField: O.none,
        });
        expect(result).toStrictEqual(expected);
    });
    test('should decode option none without the extra layer from a non existing property', () => {
        const testValueEncoded = {
            strField: 'str',
        };
        const result = testTypeCodec.decode(testValueEncoded);
        const expected = E.right({
            strField: 'str',
            intField: O.none,
        });
        expect(result).toStrictEqual(expected);
    });
});
