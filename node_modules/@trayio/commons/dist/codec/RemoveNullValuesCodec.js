"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoveNullValuesCodec = void 0;
const E = __importStar(require("fp-ts/lib/Either"));
class RemoveNullValuesCodec {
    static instance = new RemoveNullValuesCodec();
    encode(value) {
        return this.removeNullValuesIfPresent(value);
    }
    decode(value) {
        return E.right(this.removeNullValuesIfPresent(value));
    }
    isObject(value) {
        return typeof value === 'object' && !Array.isArray(value) && value !== null;
    }
    removeNullValuesIfPresent(value) {
        if (value === null) {
            return value;
        }
        if (this.isObject(value)) {
            return this.removeNullFromObjectIfPresent(value);
        }
        if (Array.isArray(value)) {
            return this.removeNullFromArrayIfPresent(value);
        }
        return value;
    }
    removeNullFromArrayIfPresent(value) {
        return value.reduce((acc, propertyValue) => {
            if (propertyValue == null) {
                return acc;
            }
            return [...acc, this.removeNullValuesIfPresent(propertyValue)];
        }, []);
    }
    removeNullFromObjectIfPresent(value) {
        return Object.entries(value).reduce((acc, [key, propertyValue]) => {
            if (propertyValue == null) {
                return acc;
            }
            if (this.isObject(propertyValue)) {
                const nestedObject = this.removeNullFromObjectIfPresent(propertyValue);
                return { ...acc, [key]: nestedObject };
            }
            if (Array.isArray(propertyValue)) {
                const nestedArray = this.removeNullFromArrayIfPresent(propertyValue);
                return { ...acc, [key]: nestedArray };
            }
            return { ...acc, [key]: propertyValue };
        }, {});
    }
}
exports.RemoveNullValuesCodec = RemoveNullValuesCodec;
