import * as E from 'fp-ts/Either';
export type Failure<E> = {
    readonly _tag: 'Failure';
    readonly isSuccess: false;
    readonly isFailure: true;
    readonly error: E;
};
export type Success<T> = {
    readonly _tag: 'Success';
    readonly isSuccess: true;
    readonly isFailure: false;
    readonly value: T;
};
export type Result<E, T> = Failure<E> | Success<T>;
export declare class ResultFailureError<E> extends Error {
    failureCause: E;
    constructor(failureCause: E);
}
export interface ResultInterface {
    success: <E, T>(value: T) => Result<E, T>;
    failure: <E, T>(error: E) => Result<E, T>;
    getSuccessfulValueOrFail: <E, T>(result: Result<E, T>) => T;
    map: <E, T, R>(result: Result<E, T>, mapping: (value: T) => R) => Result<E, R>;
}
export declare const Result: ResultInterface;
export interface ResultInternalInterface {
    fromEitherWithSimpleError: <T>(either: E.Either<Error, T>) => Result<Error, T>;
    fromEitherWithSimpleErrorAndUnknown: <T>(either: E.Either<Error, unknown>) => Result<Error, T>;
}
export declare const ResultInternal: ResultInternalInterface;
//# sourceMappingURL=Result.d.ts.map