"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultInternal = exports.Result = exports.ResultFailureError = void 0;
const E = __importStar(require("fp-ts/Either"));
class ResultFailureError extends Error {
    failureCause;
    constructor(failureCause) {
        super(`Result could not be read because it is a failure: ${JSON.stringify(failureCause)}`);
        this.failureCause = failureCause;
    }
}
exports.ResultFailureError = ResultFailureError;
exports.Result = {
    success: (value) => ({
        _tag: 'Success',
        isSuccess: true,
        isFailure: false,
        value,
    }),
    failure: (error) => ({
        _tag: 'Failure',
        isSuccess: false,
        isFailure: true,
        error,
    }),
    getSuccessfulValueOrFail(result) {
        switch (result.isSuccess) {
            case true:
                return result.value;
            case false:
                throw new ResultFailureError(result.error);
        }
    },
    map: (result, mapping) => {
        switch (result.isSuccess) {
            case true:
                return exports.Result.success(mapping(result.value));
            case false:
                return exports.Result.failure(result.error);
        }
    },
};
exports.ResultInternal = {
    fromEitherWithSimpleError: (either) => E.match((error) => exports.Result.failure(error), (value) => exports.Result.success(value))(either),
    fromEitherWithSimpleErrorAndUnknown: (either) => E.match((error) => exports.Result.failure(error), (value) => exports.Result.success(value))(either),
};
