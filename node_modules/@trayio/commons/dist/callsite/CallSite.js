"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallSite = void 0;
const pathLib = __importStar(require("path"));
exports.CallSite = {
    getCurrentCallSites: () => {
        let callSites = [];
        const _prepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = (_, stack) => {
            callSites = stack.slice(2); // do not include this function and the immediate caller function
            return stack;
        };
        new Error().stack; // eslint-disable-line @typescript-eslint/no-unused-expressions
        Error.prepareStackTrace = _prepareStackTrace;
        const result = callSites
            .filter((callSite) => callSite.getFileName() !== null) // skip iterations
            .map((callSite) => {
            const filePath = callSite.getFileName();
            const folderPath = pathLib.normalize(pathLib.join(filePath, '..'));
            return {
                filePath,
                folderPath,
            };
        });
        return result;
    },
};
