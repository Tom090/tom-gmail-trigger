"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const E = __importStar(require("fp-ts/Either"));
const O = __importStar(require("fp-ts/Option"));
const DynamicSchema_1 = require("./DynamicSchema");
describe('DynamicSchema', () => {
    let validSchema;
    let invalidSchema;
    let value;
    let valueWithExtraFields;
    let invalidValue;
    beforeEach(() => {
        validSchema = {
            type: 'object',
            properties: {
                name: {
                    type: 'string',
                },
                age: {
                    type: 'number',
                },
                races: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string',
                            },
                            car: {
                                type: 'object',
                                properties: {
                                    model: {
                                        type: 'string',
                                    },
                                },
                            },
                        },
                        required: ['name', 'car'],
                    },
                },
            },
            required: ['name', 'age', 'races'],
            advanced: [], // not part of json schema but the validator should not be strict with extra elements
        };
        invalidSchema = {
            type: 'invalidType',
            properties: {
                name: {
                    type: 'string',
                },
                age: {
                    type: 'number',
                },
            },
            required: ['name', 'age'],
        };
        value = {
            name: 'John Doe',
            age: 30,
            races: [
                {
                    name: 'monza',
                    car: {
                        model: 'ferrari',
                    },
                },
            ],
        };
        valueWithExtraFields = {
            name: 'John Doe',
            age: 30,
            extra: 'field',
            races: [
                {
                    name: 'monza',
                    country: 'italy',
                    car: {
                        model: 'ferrari',
                        year: 2017,
                    },
                },
            ],
        };
        invalidValue = {
            name: 'John Doe',
            age: '30',
            races: [
                {
                    name: 'monza',
                },
            ],
        };
    });
    describe('fromDynamicObject', () => {
        it('should return a Right DynamicSchema when given a valid schema object', () => {
            const result = DynamicSchema_1.DynamicSchema.fromDynamicObject(validSchema);
            expect(E.isRight(result)).toBe(true);
            if (E.isRight(result)) {
                expect(result.right).toEqual(validSchema);
            }
        });
        it('should return a Left Error when given an invalid schema object', () => {
            const result = DynamicSchema_1.DynamicSchema.fromDynamicObject(invalidSchema);
            expect(E.isLeft(result)).toBe(true);
            if (E.isLeft(result)) {
                expect(result.left).toBeInstanceOf(Error);
                expect(result.left.message).toContain('Failed to create DynamicSchema:');
            }
        });
        it('should remove empty $schema property', () => {
            const schema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                    },
                    age: {
                        type: 'number',
                    },
                },
                advanced: [],
                $schema: 'http://json-schema.org/draft-07/schema#',
            };
            const expectedSchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                    },
                    age: {
                        type: 'number',
                    },
                },
                advanced: [],
            };
            const actualSchemaE = DynamicSchema_1.DynamicSchema.fromDynamicObject(schema, O.none);
            expect(actualSchemaE).toEqual(E.right(expectedSchema));
        });
        it('should correctly remove empty required arrays and not add additionalProperties when strict is not set', () => {
            const schema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                    },
                    age: {
                        type: 'number',
                    },
                },
                required: [],
                advanced: [],
            };
            const expectedSchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                    },
                    age: {
                        type: 'number',
                    },
                },
                advanced: [],
            };
            const actualSchemaE = DynamicSchema_1.DynamicSchema.fromDynamicObject(schema, O.none);
            expect(actualSchemaE).toEqual(E.right(expectedSchema));
        });
        it('should correctly keep populated required arrays and not add additionalProperties when strict is not set', () => {
            const schema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                    },
                    age: {
                        type: 'number',
                    },
                },
                required: ['age', 'name'],
                advanced: [],
            };
            const expectedSchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                    },
                    age: {
                        type: 'number',
                    },
                },
                required: ['age', 'name'],
                advanced: [],
            };
            const actualSchemaE = DynamicSchema_1.DynamicSchema.fromDynamicObject(schema, O.none);
            expect(actualSchemaE).toEqual(E.right(expectedSchema));
        });
        it('should correctly remove empty required and add additionalProperties=true to object schema when strict is set', () => {
            const schema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                    },
                    age: {
                        type: 'number',
                    },
                },
                required: [],
                advanced: [],
            };
            const expectedSchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                    },
                    age: {
                        type: 'number',
                    },
                },
                advanced: [],
                additionalProperties: true,
            };
            const actualSchemaE = DynamicSchema_1.DynamicSchema.fromDynamicObject(schema, O.some(false));
            expect(actualSchemaE).toEqual(E.right(expectedSchema));
        });
        it('should correctly add additionalProperties=false to object schema', () => {
            const schema = validSchema;
            const expectedSchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                    },
                    age: {
                        type: 'number',
                    },
                    races: {
                        type: 'array',
                        items: {
                            type: 'object',
                            additionalProperties: false,
                            required: ['name', 'car'],
                            properties: {
                                name: {
                                    type: 'string',
                                },
                                car: {
                                    type: 'object',
                                    additionalProperties: false,
                                    properties: {
                                        model: {
                                            type: 'string',
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
                required: ['name', 'age', 'races'],
                advanced: [],
                additionalProperties: false,
            };
            const actualSchemaE = DynamicSchema_1.DynamicSchema.fromDynamicObject(schema, O.some(true));
            expect(actualSchemaE).toEqual(E.right(expectedSchema));
        });
        it('should correctly add additionalProperties=true to complex object schema', () => {
            const schema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                first: {
                                    type: 'string',
                                },
                                last: {
                                    type: 'string',
                                },
                            },
                        },
                    },
                    age: {
                        type: 'object',
                        properties: {
                            years: {
                                type: 'number',
                            },
                            months: {
                                type: 'number',
                            },
                        },
                    },
                },
            };
            const expectedSchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                first: {
                                    type: 'string',
                                },
                                last: {
                                    type: 'string',
                                },
                            },
                            additionalProperties: true,
                        },
                    },
                    age: {
                        type: 'object',
                        properties: {
                            years: {
                                type: 'number',
                            },
                            months: {
                                type: 'number',
                            },
                        },
                        additionalProperties: true,
                    },
                },
                additionalProperties: true,
            };
            const actualSchemaE = DynamicSchema_1.DynamicSchema.fromDynamicObject(schema, O.some(false));
            expect(actualSchemaE).toEqual(E.right(expectedSchema));
        });
        it('should skip mutation if there is no object type schema', () => {
            const schema = {
                type: 'string',
            };
            const actualSchemaE = DynamicSchema_1.DynamicSchema.fromDynamicObject(schema, O.some(true));
            expect(actualSchemaE).toEqual(E.right(schema));
        });
        it('should correctly add additionalProperties=true to oneOf schemas', () => {
            const schema = {
                type: 'object',
                oneOf: [
                    {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            age: { type: 'number' },
                        },
                        required: ['name', 'age'],
                    },
                    {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            email: { type: 'string' },
                        },
                        required: ['name', 'email'],
                    },
                ],
            };
            const expectedSchema = {
                type: 'object',
                oneOf: [
                    {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            age: { type: 'number' },
                        },
                        required: ['name', 'age'],
                        additionalProperties: true,
                    },
                    {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            email: { type: 'string' },
                        },
                        required: ['name', 'email'],
                        additionalProperties: true,
                    },
                ],
            };
            const actualSchemaE = DynamicSchema_1.DynamicSchema.fromDynamicObject(schema, O.some(false));
            expect(actualSchemaE).toEqual(E.right(expectedSchema));
        });
        it('should correctly add additionalProperties=true to anyOf schemas', () => {
            const schema = {
                type: 'object',
                anyOf: [
                    {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            age: { type: 'number' },
                        },
                        required: ['name', 'age'],
                    },
                    {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            email: { type: 'string' },
                        },
                        required: ['name', 'email'],
                    },
                ],
            };
            const expectedSchema = {
                type: 'object',
                anyOf: [
                    {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            age: { type: 'number' },
                        },
                        required: ['name', 'age'],
                        additionalProperties: true,
                    },
                    {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            email: { type: 'string' },
                        },
                        required: ['name', 'email'],
                        additionalProperties: true,
                    },
                ],
            };
            const actualSchemaE = DynamicSchema_1.DynamicSchema.fromDynamicObject(schema, O.some(false));
            expect(actualSchemaE).toEqual(E.right(expectedSchema));
        });
        it('should correctly add additionalProperties=true to allOf schemas', () => {
            const schema = {
                type: 'object',
                allOf: [
                    {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            age: { type: 'number' },
                        },
                        required: ['name', 'age'],
                    },
                    {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            email: { type: 'string' },
                        },
                        required: ['name', 'email'],
                    },
                ],
            };
            const expectedSchema = {
                type: 'object',
                allOf: [
                    {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            age: { type: 'number' },
                        },
                        required: ['name', 'age'],
                        additionalProperties: true,
                    },
                    {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            email: { type: 'string' },
                        },
                        required: ['name', 'email'],
                        additionalProperties: true,
                    },
                ],
            };
            const actualSchemaE = DynamicSchema_1.DynamicSchema.fromDynamicObject(schema, O.some(false));
            expect(actualSchemaE).toEqual(E.right(expectedSchema));
        });
    });
    describe('validate', () => {
        it('should return a Right with the value when the value matches the schema', () => {
            const schema = DynamicSchema_1.DynamicSchema.fromDynamicObject(validSchema);
            if (E.isRight(schema)) {
                const result = DynamicSchema_1.DynamicSchema.validate(schema.right, value, O.none);
                expect(E.isRight(result)).toBe(true);
                if (E.isRight(result)) {
                    expect(result.right).toEqual(value);
                }
            }
        });
        it('should return a Right with the value when strict is false and value matches the schema', () => {
            const schema = DynamicSchema_1.DynamicSchema.fromDynamicObject(validSchema);
            if (E.isRight(schema)) {
                const result = DynamicSchema_1.DynamicSchema.validate(schema.right, value, O.some(false));
                expect(E.isRight(result)).toBe(true);
                if (E.isRight(result)) {
                    expect(result.right).toEqual(value);
                }
            }
        });
        it('should return a Right with non extra values when value matches the schema but has extra fields', () => {
            const schema = DynamicSchema_1.DynamicSchema.fromDynamicObject(validSchema);
            if (E.isRight(schema)) {
                const result = DynamicSchema_1.DynamicSchema.validate(schema.right, valueWithExtraFields, O.some(false));
                expect(E.isRight(result)).toBe(true);
                if (E.isRight(result)) {
                    expect(result.right).toEqual(value);
                }
            }
        });
        it('should return a Left Error when the value does not match the schema', () => {
            const schema = DynamicSchema_1.DynamicSchema.fromDynamicObject(validSchema);
            if (E.isRight(schema)) {
                const result = DynamicSchema_1.DynamicSchema.validate(schema.right, invalidValue, O.none);
                expect(E.isLeft(result)).toBe(true);
                if (E.isLeft(result)) {
                    expect(result.left).toBeInstanceOf(Error);
                }
            }
        });
    });
});
