"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakeFileStorage = void 0;
const TE = __importStar(require("fp-ts/TaskEither"));
const E = __importStar(require("fp-ts/Either"));
const function_1 = require("fp-ts/lib/function");
const stream_1 = require("stream");
class FakeFileStorage {
    files;
    constructor() {
        this.files = new Map();
    }
    write(file) {
        return (0, function_1.pipe)(TE.fromEither(E.tryCatch(() => this.files.set(file.key, file), (error) => new Error(error))), TE.map(() => file));
    }
    read(fileName) {
        return (0, function_1.pipe)(TE.fromEither(E.tryCatch(() => this.files.get(fileName), (error) => new Error(error))), TE.chain((file) => {
            if (file === undefined) {
                return TE.left(new Error(`File ${fileName} not found`));
            }
            return TE.right(file);
        }));
    }
    delete(fileName) {
        return (0, function_1.pipe)(TE.fromEither(E.tryCatch(() => this.files.delete(fileName), (error) => new Error(error))), TE.map(() => undefined));
    }
    getSharedUrl(key) {
        return TE.right({ url: key });
    }
    createDirectory(key) {
        return (0, function_1.pipe)(TE.fromEither(E.tryCatch(() => this.files.set(key, {
            key,
            metadata: { name: key },
            content: stream_1.Readable.from(''),
        }), (error) => new Error(error))), TE.map(() => undefined));
    }
}
exports.FakeFileStorage = FakeFileStorage;
