/// <reference types="node" />
import { Readable } from 'stream';
import { TaskEither } from 'fp-ts/TaskEither';
import * as t from 'io-ts';
import { Option } from 'fp-ts/lib/Option';
import { DynamicObject } from '../dynamictype/DynamicType';
export type FileMetadata = {
    name: string;
    size?: number;
    contentType?: string;
};
export declare const fileMetadataDescriptor: t.Type<FileMetadata, unknown>;
export type File = {
    key: string;
    metadata: FileMetadata;
    content: Readable;
};
export type SharedUrl = {
    url: string;
    expires?: number;
};
export interface FileStorage {
    write(file: File, writeOptions: Option<DynamicObject>): TaskEither<Error, File>;
    read(key: string, name?: string): TaskEither<Error, File>;
    getSharedUrl(key: string): TaskEither<Error, SharedUrl>;
    delete(key: string): TaskEither<Error, undefined>;
    createDirectory(key: string): TaskEither<Error, undefined>;
}
//# sourceMappingURL=File.d.ts.map