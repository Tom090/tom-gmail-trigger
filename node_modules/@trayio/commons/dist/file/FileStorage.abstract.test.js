"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileStorageTest = void 0;
const E = __importStar(require("fp-ts/Either"));
const uuid_1 = require("uuid");
const O = __importStar(require("fp-ts/Option"));
const stream_1 = require("stream");
const JsonSerialization_1 = require("../serialization/JsonSerialization");
const fileStorageTest = (fileStorage) => {
    describe('FileStorage Tests', () => {
        describe('Writing a file', () => {
            describe("when it's successful", () => {
                it('should write a file, read the file then delete the file', async () => {
                    const serialization = new JsonSerialization_1.JsonSerialization();
                    const fileContent = { test: 'someValue' };
                    const readableStream = new stream_1.Readable({
                        read() {
                            this.push(Buffer.from(serialization.serialize(fileContent)));
                            this.push(null);
                        },
                    });
                    const fileName = `test-${(0, uuid_1.v4)()}.json`;
                    const file = {
                        key: fileName,
                        metadata: {
                            name: fileName,
                        },
                        content: readableStream,
                    };
                    const writtenFile = await fileStorage.write(file, O.none)();
                    expect(writtenFile).toEqual(E.right(file));
                    const sharedUrl = await fileStorage.getSharedUrl(file.key)();
                    expect(sharedUrl).toEqual(E.right(expect.objectContaining({
                        url: expect.any(String),
                    })));
                    if (E.isRight(sharedUrl)) {
                        if (typeof sharedUrl.right.expires !== 'undefined') {
                            expect(sharedUrl.right.expires).toEqual(expect.any(Number));
                        }
                    }
                    const read = await fileStorage.read(file.key)();
                    const readResponse = E.getOrElse(() => {
                        throw new Error('Expected right');
                    })(read);
                    let data = '';
                    await new Promise((resolve) => {
                        readResponse.content.on('data', (chunk) => {
                            data += chunk;
                        });
                        readResponse.content.on('end', () => {
                            resolve(undefined);
                        });
                    });
                    const deserializedData = serialization.deserialize(Buffer.from(data));
                    if (E.isLeft(deserializedData)) {
                        throw new Error('failed to deserialise stream contents');
                    }
                    expect(deserializedData.right).toStrictEqual(fileContent);
                    const deleted = await fileStorage.delete(file.key)();
                    expect(deleted).toEqual(E.right(undefined));
                });
            });
        });
        describe('Reading a file', () => {
            describe('when the file does not exist', () => {
                it('should return does not exist error', async () => {
                    const read = await fileStorage.read(`fail_test-${(0, uuid_1.v4)()}.zip`)();
                    if (E.isRight(read)) {
                        throw new Error('Expected left');
                    }
                    expect(read.left).toBeInstanceOf(Error);
                });
            });
        });
    });
};
exports.fileStorageTest = fileStorageTest;
