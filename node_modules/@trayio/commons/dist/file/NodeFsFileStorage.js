"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeFsFileStorage = void 0;
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const TE = __importStar(require("fp-ts/lib/TaskEither"));
const function_1 = require("fp-ts/lib/function");
const Task_1 = require("../task/Task");
class NodeFsFileStorage {
    basePath;
    constructor(basePath = '/tmp') {
        this.basePath = basePath;
    }
    write(file) {
        const filePath = `${this.basePath}/${file.key}`;
        const result = (0, Task_1.createTaskEitherFromPromiseWithSimpleError)(() => fs.writeFile(filePath, file.content));
        return (0, function_1.pipe)(result, TE.map(() => file));
    }
    read(key, name = key) {
        const filePath = `${this.basePath}/${key}`;
        return TE.tryCatch(async () => {
            const fileHandle = await fs.open(filePath, 'r');
            const stat = await fs.stat(filePath);
            const stream = fileHandle.createReadStream();
            const metadata = {
                name,
                size: stat.size,
            };
            return { metadata, key: filePath, content: stream };
        }, (reason) => new Error(String(reason)));
    }
    getSharedUrl(key) {
        const filePath = `${this.basePath}/${key}`;
        return TE.tryCatch(async () => ({
            url: path.resolve(filePath),
        }), (reason) => new Error(String(reason)));
    }
    delete(key) {
        const filePath = `${this.basePath}/${key}`;
        const result = (0, Task_1.createTaskEitherFromPromiseWithSimpleError)(() => fs.unlink(filePath));
        return (0, function_1.pipe)(result, TE.map(() => undefined));
    }
    createDirectory(key) {
        const filePath = `${this.basePath}/${key}`;
        const result = (0, Task_1.createTaskEitherFromPromiseWithSimpleError)(() => fs.mkdir(filePath, { recursive: true }));
        return (0, function_1.pipe)(result, TE.map(() => undefined));
    }
}
exports.NodeFsFileStorage = NodeFsFileStorage;
