"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const E = __importStar(require("fp-ts/Either"));
const Base64_1 = require("./Base64");
const JsonSerialization_1 = require("../serialization/JsonSerialization");
describe('Base64', () => {
    test('should create base64 type for valid string', () => {
        const testValue = 'VGhpcyBpcyBhIHRlc3Qgc3RyaW5nLg==';
        const base64Result = Base64_1.Base64.fromBase64String(testValue);
        const base64 = E.getOrElse((error) => {
            throw new Error('Should have been right');
        })(base64Result);
        expect(base64.toString()).toStrictEqual(testValue);
    });
    test('should encode and decode an ArrayBuffer', () => {
        const testValue = { test: 'value' };
        const arrayBuffer = new JsonSerialization_1.JsonSerialization().serialize(testValue);
        const encoded = Base64_1.Base64.encodeBinary(arrayBuffer);
        const decoded = Base64_1.Base64.decodeBinary(encoded);
        expect(decoded).toStrictEqual(arrayBuffer);
    });
    test('should fail when string is invalid', () => {
        const testValue = 'tests';
        const base64Result = Base64_1.Base64.fromBase64String(testValue);
        expect(E.isLeft(base64Result)).toBe(true);
    });
});
