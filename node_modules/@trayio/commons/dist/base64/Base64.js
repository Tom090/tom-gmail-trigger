"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Base64 = void 0;
const t = __importStar(require("io-ts"));
const E = __importStar(require("fp-ts/Either"));
const TypeCodec_1 = require("../codec/TypeCodec");
const isBase64 = (s) => {
    //  It does not match an empty string, which is the base64 encoding of zero-length binary data according to RFC 4648
    const exp = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
    return exp.test(s);
};
const base64TypeDescriptor = t.brand(t.string, (input) => isBase64(input), 'Base64');
const base64TypeCodec = TypeCodec_1.TypeCodec.fromDescriptor(base64TypeDescriptor);
exports.Base64 = {
    typeDescriptor: base64TypeDescriptor,
    typeCodec: base64TypeCodec,
    fromBase64String: (value) => base64TypeCodec.decode(value),
    encodeBinary: (value) => {
        const base64data = Buffer.from(value).toString('base64');
        return E.getOrElse(() => {
            throw new Error('This should never be thrown');
        })(base64TypeCodec.decode(base64data));
    },
    decodeBinary: (value) => {
        const base64String = base64TypeCodec.encode(value);
        const binary = Buffer.from(base64String, 'base64');
        return binary.buffer.slice(binary.byteOffset, binary.byteOffset + binary.byteLength);
    },
};
