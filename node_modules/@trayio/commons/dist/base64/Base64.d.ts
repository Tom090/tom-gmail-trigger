import * as t from 'io-ts';
import * as E from 'fp-ts/Either';
import { Codec } from '../codec/Codec';
declare const base64TypeDescriptor: t.BrandC<t.StringC, Base64Brand>;
export type Base64 = t.TypeOf<typeof base64TypeDescriptor>;
export interface Base64Brand {
    readonly Base64: unique symbol;
}
export interface Base64Interface {
    typeDescriptor: t.BrandC<t.StringC, Base64Brand>;
    typeCodec: Codec<Base64>;
    fromBase64String: (value: string) => E.Either<Error, Base64>;
    encodeBinary: (value: ArrayBuffer) => Base64;
    decodeBinary: (value: Base64) => ArrayBuffer;
}
export declare const Base64: Base64Interface;
export {};
//# sourceMappingURL=Base64.d.ts.map