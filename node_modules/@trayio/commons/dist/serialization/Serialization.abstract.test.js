"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testSerialization = void 0;
const E = __importStar(require("fp-ts/Either"));
const O = __importStar(require("fp-ts/Option"));
const function_1 = require("fp-ts/function");
function testSerialization(serialization) {
    describe('Serialization Test', () => {
        test('should serialize and deserialize a value', () => {
            const testValue = {
                strField: 'str',
                intField: O.some(123),
            };
            const result = (0, function_1.pipe)(E.right(serialization.serialize(testValue)), E.chain((serialized) => serialization.deserialize(serialized)));
            expect(result).toStrictEqual(E.right(testValue));
        });
        test('should serialize undefined', () => {
            const undefinedType = undefined;
            const result = serialization.serialize(undefinedType);
            const expected = new ArrayBuffer(0);
            expect(result).toStrictEqual(expected);
        });
        test('should deserialize undefined', () => {
            const undefinedSerialised = new ArrayBuffer(0);
            const result = serialization.deserialize(undefinedSerialised);
            const expected = E.right(undefined);
            expect(result).toStrictEqual(expected);
        });
    });
}
exports.testSerialization = testSerialization;
