"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMultiPartBody = exports.serializationFormatToHttpContentType = exports.HttpHeaders = exports.HttpHeader = exports.HttpContentType = exports.HttpMethod = void 0;
const O = __importStar(require("fp-ts/lib/Option"));
const function_1 = require("fp-ts/lib/function");
const Serialization_1 = require("../serialization/Serialization");
const getHeader = (headers, name) => O.fromNullable(headers[name.toLowerCase()]);
var HttpMethod;
(function (HttpMethod) {
    HttpMethod["Delete"] = "DELETE";
    HttpMethod["Get"] = "GET";
    HttpMethod["Head"] = "HEAD";
    HttpMethod["Options"] = "OPTIONS";
    HttpMethod["Patch"] = "PATCH";
    HttpMethod["Post"] = "POST";
    HttpMethod["Put"] = "PUT";
})(HttpMethod || (exports.HttpMethod = HttpMethod = {}));
var HttpContentType;
(function (HttpContentType) {
    HttpContentType["Json"] = "application/json";
    HttpContentType["OctetStream"] = "application/octet-stream";
    HttpContentType["FormUrlEncoded"] = "application/x-www-form-urlencoded";
    HttpContentType["MultipartRequestBody"] = "multipart/form-data";
    HttpContentType["Text"] = "text/plain";
})(HttpContentType || (exports.HttpContentType = HttpContentType = {}));
var HttpHeader;
(function (HttpHeader) {
    HttpHeader["Authorization"] = "Authorization";
    HttpHeader["ContentType"] = "Content-Type";
    HttpHeader["Impersonation"] = "X-Tray-Admin-Impersonate";
    HttpHeader["UserAgent"] = "User-Agent";
    HttpHeader["ContentLength"] = "Content-Length";
})(HttpHeader || (exports.HttpHeader = HttpHeader = {}));
exports.HttpHeaders = {
    get: (headers, name) => getHeader(headers, name),
    extractBearerToken: (headers) => (0, function_1.pipe)(getHeader(headers, HttpHeader.Authorization), O.chain((header) => header.toLowerCase().startsWith('bearer ')
        ? O.fromNullable(header.substring(7))
        : O.fromNullable(null))),
    fromDynamicObject(headers) {
        const flattenObject = (obj, prefix = '') => Object.entries(obj).reduce((acc, [key, value]) => {
            const newKey = prefix ? `${prefix}.${key}` : key;
            if (typeof value === 'object' &&
                !Array.isArray(value) &&
                value !== null) {
                return { ...acc, ...flattenObject(value, newKey) };
            }
            acc[newKey] = Array.isArray(value) ? value.join(',') : value;
            return acc;
        }, {});
        const transformHeaders = (obj) => Object.entries(obj).reduce((acc, [key, value]) => {
            const keyParts = key.split('.');
            const mainKey = keyParts.shift();
            if (mainKey === undefined) {
                return acc;
            }
            if (typeof value === 'string' && keyParts.length === 0) {
                if (Array.isArray(headers[mainKey])) {
                    const topLevelArr = headers[mainKey];
                    if (topLevelArr.every((item) => !item.includes('='))) {
                        /*
                            Single element arrays or empty arrays should be treated as a single value
                            [] -> ''
                            ['value'] -> 'value'
                        */
                        if (topLevelArr.length === 1) {
                            // eslint-disable-next-line prefer-destructuring
                            acc[mainKey] = topLevelArr[0];
                        }
                        else if (topLevelArr.length === 0) {
                            acc[mainKey] = '';
                        }
                        else {
                            acc[mainKey] = topLevelArr;
                        }
                    }
                }
                else {
                    acc[mainKey] = value;
                }
            }
            else {
                acc[mainKey] = acc[mainKey] || [];
                acc[mainKey].push(`${keyParts.join('.')}=${value}`);
            }
            return acc;
        }, {});
        const flattened = flattenObject(headers);
        return transformHeaders(flattened);
    },
    toDynamicObject: (headers) => {
        /*
            Headers will conform to OpenAPI 3.0 standards with 'style: simple', 'explode: true'
            See: https://swagger.io/docs/specification/serialization/
            EG:
            Primitive - X-MyHeader: [1]
            Array - X-MyHeader: [3,4,5]
            Object - X-MyHeader: [role=admin, name.first=Alex, name.last=Smith, someArray=2,3,4]
        */
        const parseNestedProperties = (item, obj) => {
            const [key, value] = item.split('=');
            const modifiedVal = value.includes(',') ? value.split(',') : undefined;
            if (key.includes('.')) {
                assignNestedProperty(key, value, obj);
            }
            else {
                obj[key] = modifiedVal || value;
            }
            return obj;
        };
        const assignNestedProperty = (key, value, obj) => {
            const keys = key.split('.');
            obj[keys[0]] = obj[keys[0]] || {};
            if (keys.length > 1) {
                parseNestedProperties(`${keys.slice(1).join('.')}=${value}`, obj[keys[0]]);
            }
            else {
                obj[keys[0]] = value;
            }
        };
        return Object.keys(headers).reduce((acc, key) => {
            const value = headers[key];
            if (Array.isArray(value)) {
                if (value.length === 0) {
                    acc[key] = '';
                }
                else if (value.length === 1) {
                    if (value[0].includes('=')) {
                        acc[key] = parseNestedProperties(value[0], {});
                    }
                    else {
                        // eslint-disable-next-line prefer-destructuring
                        acc[key] = value[0];
                    }
                }
                else if (value.every((item) => !item.includes('='))) {
                    acc[key] = value;
                }
                else {
                    acc[key] = value.reduce((obj, item) => parseNestedProperties(item, obj), {});
                }
            }
            else {
                acc[key] = value;
            }
            return acc;
        }, {});
    },
};
exports.serializationFormatToHttpContentType = {
    [Serialization_1.SerializationFormat.Json]: HttpContentType.Json,
};
const isMultiPartBody = (body) => body?.files !== undefined;
exports.isMultiPartBody = isMultiPartBody;
