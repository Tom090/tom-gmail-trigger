"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Http_1 = require("./Http");
describe('HttpHeaders', () => {
    it('should convert headers to DynamicObject', () => {
        const headers = {
            'content-type': 'application/json',
            'content-length': '100',
            'x-custom-header': [
                'role=admin',
                'name.first=Alex',
                'name.last=Smith',
                'description.detail.age=30',
                'array.values=2,3,4',
            ],
            'x-custom-header-2': ['prop=val'],
            'x-custom-header-3': ['val'],
            'x-custom-header-4': ['1', '2', '3'],
        };
        const result = Http_1.HttpHeaders.toDynamicObject(headers);
        expect(result).toEqual({
            'content-type': 'application/json',
            'content-length': '100',
            'x-custom-header': {
                role: 'admin',
                name: {
                    first: 'Alex',
                    last: 'Smith',
                },
                description: {
                    detail: {
                        age: '30',
                    },
                },
                array: {
                    values: ['2', '3', '4'],
                },
            },
            'x-custom-header-2': {
                prop: 'val',
            },
            'x-custom-header-3': 'val',
            'x-custom-header-4': ['1', '2', '3'],
        });
    });
    it('should convert headers to DynamicObject with empty array', () => {
        const headers = {
            'content-type': 'application/json',
            'content-length': '100',
            'x-custom-header': [],
        };
        const result = Http_1.HttpHeaders.toDynamicObject(headers);
        expect(result).toEqual({
            'content-type': 'application/json',
            'content-length': '100',
            'x-custom-header': '',
        });
    });
    it('should convert DynamicObject to headers', () => {
        const headers = {
            'content-type': 'application/json',
            'content-length': '100',
            'x-empty-header': [],
            'x-single-element-header': ['element'],
            'x-custom-header': {
                role: 'admin',
                name: {
                    first: 'Alex',
                    last: 'Smith',
                },
                description: {
                    detail: {
                        age: '30',
                    },
                },
                array: {
                    values: ['2', '3', '4'],
                },
            },
            'x-custom-header-4': ['1', '2', '3'],
        };
        const result = Http_1.HttpHeaders.fromDynamicObject(headers);
        expect(result).toEqual({
            'content-type': 'application/json',
            'content-length': '100',
            'x-empty-header': '',
            'x-single-element-header': 'element',
            'x-custom-header': [
                'role=admin',
                'name.first=Alex',
                'name.last=Smith',
                'description.detail.age=30',
                'array.values=2,3,4',
            ],
            'x-custom-header-4': ['1', '2', '3'],
        });
    });
    it('should serialize headers then deserialize and get the same result', () => {
        const headers = {
            'content-type': 'application/json',
            'content-length': '100',
            'x-custom-header': {
                role: 'admin',
                name: {
                    first: 'Alex',
                    last: 'Smith',
                },
                description: {
                    detail: {
                        age: '30',
                    },
                },
                array: {
                    values: ['2', '3', '4'],
                },
            },
            'x-custom-header-4': ['1', '2', '3'],
            'x-custom-header-2': '',
        };
        const serialized = Http_1.HttpHeaders.fromDynamicObject(headers);
        const deserialized = Http_1.HttpHeaders.toDynamicObject(serialized);
        expect(deserialized).toEqual(headers);
    });
    it('should serialize headers with empty array then deserialize and get an empty string', () => {
        const headers = {
            'x-custom-header-2': [],
        };
        const serialized = Http_1.HttpHeaders.fromDynamicObject(headers);
        const deserialized = Http_1.HttpHeaders.toDynamicObject(serialized);
        expect(deserialized).toEqual({
            'x-custom-header-2': '',
        });
    });
});
