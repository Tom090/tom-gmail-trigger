import { Result, ResultInterface } from '@trayio/commons/result/Result';
import { DynamicObject } from '@trayio/commons/dynamictype/DynamicType';
export type OperationHandlerAuth<USER, APP> = {
    authType: string;
    authId: string;
    user: USER;
    app: APP;
    refreshMessage?: string;
};
export type TokenOperationHandlerAuth<USER, APP> = OperationHandlerAuth<USER, APP> & {
    authType: 'TOKEN';
};
export type Oauth1OperationHandlerAuth<USER, APP> = OperationHandlerAuth<USER, APP> & {
    authType: 'OAUTH1';
};
export type Oauth2OperationHandlerAuth<USER, APP> = OperationHandlerAuth<USER, APP> & {
    authType: 'OAUTH2';
};
export type Oauth2PasswordOperationHandlerAuth<USER, APP> = OperationHandlerAuth<USER, APP> & {
    authType: 'OAUTH2_PASSWORD';
};
export type Oauth2ClientCredentialsOperationHandlerAuth<USER, APP> = OperationHandlerAuth<USER, APP> & {
    authType: 'OAUTH2_CLIENT_CREDENTIALS';
};
export type BuiltinOperationHandlerAuth<USER, APP> = OperationHandlerAuth<USER, APP> & {
    authType: 'BUILTIN';
};
export type OperationHandlerContext<AUTH extends OperationHandlerAuth<unknown, unknown>> = {
    auth?: AUTH;
    workflowId?: string;
    workflowTitle?: string;
    userId?: string;
    externalUserId?: string;
    executionId?: string;
    organizationId?: string;
    sourceWorkflowId?: string;
    solutionId?: string;
    solutionInstanceId?: string;
    usernameHash?: string;
    workspaceIdHash?: string;
    datapotIdHash?: string;
};
export type OperationHandlerReference<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> = {
    name: string;
};
export type BaseTriggerOperationHttpRequest = {
    method: string;
    path: string;
    headers: Record<string, string[]>;
    query: Record<string, string[]>;
    fragment?: string;
};
export type RegularTriggerOperationHttpRequest = BaseTriggerOperationHttpRequest & {
    hasLargeBody: false;
    body: string;
    form?: Record<string, string[]>;
};
export type LargeTriggerOperationHttpRequest = BaseTriggerOperationHttpRequest & {
    hasLargeBody: true;
    body_size: number;
    body_url: string;
    body_message: string;
};
export type TriggerOperationHttpRequest = RegularTriggerOperationHttpRequest | LargeTriggerOperationHttpRequest;
export type TriggerOperationHttpResponse = {
    status_code: number;
    headers: Record<string, string[]>;
    body?: string;
};
export interface TriggerOperationHttpResponseInterface {
    withStatusCode: (statusCode: number) => TriggerOperationHttpResponse;
    withStatusCodeAndHeaders: (statusCode: number, headers: Record<string, string[]>) => TriggerOperationHttpResponse;
    withStatusCodeAndBody: (statusCode: number, body: string) => TriggerOperationHttpResponse;
    withAllFields: (statusCode: number, headers: Record<string, string[]>, body: string) => TriggerOperationHttpResponse;
}
export declare const TriggerOperationHttpResponse: TriggerOperationHttpResponseInterface;
export type TriggerRequestOperationInput<T> = {
    input: T;
    request: TriggerOperationHttpRequest;
};
export type TriggerRequestOperationOutput<T> = {
    output: T;
    response?: TriggerOperationHttpResponse;
};
export type TriggerResponseOperationInput<I, R> = {
    input: I;
    response: R;
};
export type DDLOperationOutputElement<T extends string | number> = {
    text: string;
    value: T;
};
export type DDLOperationOutput<T extends string | number> = {
    result: Array<DDLOperationOutputElement<T>>;
};
export type FileReference = {
    name: string;
    url: string;
    mime_type: string;
    expires: number;
};
export type OperationHandlerError = ConnectorError | ApiError | UserInputError | OauthRefreshError | SkipTriggerError;
export type BaseOperationHandlerError = {
    message: string;
    response?: DynamicObject;
};
export type ConnectorError = BaseOperationHandlerError & {
    _tag: 'ConnectorError';
};
export type ApiError = BaseOperationHandlerError & {
    _tag: 'ApiError';
};
export type UserInputError = BaseOperationHandlerError & {
    _tag: 'UserInputError';
};
export type OauthRefreshError = BaseOperationHandlerError & {
    _tag: 'OauthRefreshError';
};
export type SkipTriggerError = BaseOperationHandlerError & {
    _tag: 'SkipTriggerError';
};
export interface OperationHandlerErrorInterface {
    connectorError: (message: string, response?: DynamicObject) => OperationHandlerError;
    apiError: (message: string, response?: DynamicObject) => OperationHandlerError;
    userInputError: (message: string, response?: DynamicObject) => OperationHandlerError;
    oauthRefreshError: (message: string, response?: DynamicObject) => OperationHandlerError;
    skipTriggerError: (message: string, response?: DynamicObject) => OperationHandlerError;
}
export declare const OperationHandlerError: OperationHandlerErrorInterface;
export type OperationHandlerResult<T> = Result<OperationHandlerError, T>;
export interface OperationHandlerResultInterface extends ResultInterface {
}
export declare const OperationHandlerResult: OperationHandlerResultInterface;
export declare enum OperationHandlerType {
    Regular = "regular",
    TriggerCreate = "trigger-create",
    TriggerResponse = "trigger-response",
    TriggerRequest = "trigger-request",
    TriggerDestroy = "trigger-destroy"
}
//# sourceMappingURL=OperationHandler.d.ts.map