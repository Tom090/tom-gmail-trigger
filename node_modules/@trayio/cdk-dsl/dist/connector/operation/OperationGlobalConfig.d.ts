import * as O from 'fp-ts/Option';
import { HttpHeaderValue } from '@trayio/commons/src/http/Http';
import { OperationHandlerAuth, OperationHandlerContext } from './OperationHandler';
type OperationGlobalConfigBaseUrl<AUTH extends OperationHandlerAuth<unknown, unknown>> = (ctx: OperationHandlerContext<AUTH>) => string;
type OperationGlobalConfigAuthBearerToken<AUTH extends OperationHandlerAuth<unknown, unknown>> = (ctx: OperationHandlerContext<AUTH>) => string;
type OperationGlobalConfigAddHeader<AUTH extends OperationHandlerAuth<unknown, unknown>> = (ctx: OperationHandlerContext<AUTH>) => {
    name: string;
    value: HttpHeaderValue;
};
export declare class OperationGlobalConfigHttp<AUTH extends OperationHandlerAuth<unknown, unknown>> {
    readonly baseUrl: O.Option<OperationGlobalConfigBaseUrl<AUTH>>;
    readonly bearerToken: O.Option<OperationGlobalConfigAuthBearerToken<AUTH>>;
    readonly headers: OperationGlobalConfigAddHeader<AUTH>[];
    readonly _tag = "OperationGlobalConfigHttp";
    static create<AUTH extends OperationHandlerAuth<unknown, unknown>>(): OperationGlobalConfigHttp<AUTH>;
    private constructor();
    withBaseUrl(baseUrl: OperationGlobalConfigBaseUrl<AUTH>): OperationGlobalConfigHttp<AUTH>;
    withBearerToken(token: OperationGlobalConfigAuthBearerToken<AUTH>): OperationGlobalConfigHttp<AUTH>;
    addHeader(header: OperationGlobalConfigAddHeader<AUTH>): OperationGlobalConfigHttp<AUTH>;
}
export {};
//# sourceMappingURL=OperationGlobalConfig.d.ts.map