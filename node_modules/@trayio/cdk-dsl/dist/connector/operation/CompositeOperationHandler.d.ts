import { OperationHandlerAuth, OperationHandlerContext, OperationHandlerResult } from './OperationHandler';
import { OperationHandlerInvocation } from './OperationHandlerInvocation';
export type CompositeOperationHandlerFunction<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> = (ctx: OperationHandlerContext<AUTH>, input: IN, invoke: OperationHandlerInvocation<AUTH>) => Promise<OperationHandlerResult<OUT>>;
export declare class CompositeOperationHandler<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> {
    readonly _tag: 'CompositeOperationHandler';
    readonly handlerFunction: CompositeOperationHandlerFunction<AUTH, IN, OUT>;
    constructor(handlerFunction: CompositeOperationHandlerFunction<AUTH, IN, OUT>);
}
//# sourceMappingURL=CompositeOperationHandler.d.ts.map