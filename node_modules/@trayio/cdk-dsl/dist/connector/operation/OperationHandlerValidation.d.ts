import { OperationHandlerAuth, OperationHandlerContext } from './OperationHandler';
export type OperationHandlerInputValidationCondition<AUTH extends OperationHandlerAuth<unknown, unknown>, IN> = (ctx: OperationHandlerContext<AUTH>, input: IN) => boolean;
export type OperationHandlerInputValidationErrorMessage<AUTH extends OperationHandlerAuth<unknown, unknown>, IN> = (ctx: OperationHandlerContext<AUTH>, input: IN) => string;
export type OperationHandlerOutputValidationCondition<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> = (ctx: OperationHandlerContext<AUTH>, input: IN, output: OUT) => boolean;
export type OperationHandlerOutputValidationErrorMessage<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> = (ctx: OperationHandlerContext<AUTH>, input: IN, output: OUT) => string;
export declare class OperationHandlerValidation<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> {
    static emptyValidation<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT>(): OperationHandlerValidation<AUTH, IN, OUT>;
    readonly inputValidation: Array<OperationHandlerInputValidation<AUTH, IN>>;
    readonly outputValidation: Array<OperationHandlerOutputValidation<AUTH, IN, OUT>>;
    private constructor();
    addInputValidation(inputValidation: OperationHandlerInputValidation<AUTH, IN>): OperationHandlerValidation<AUTH, IN, OUT>;
    addOutputValidation(outputValidation: OperationHandlerOutputValidation<AUTH, IN, OUT>): OperationHandlerValidation<AUTH, IN, OUT>;
}
export declare class OperationHandlerInputValidation<AUTH extends OperationHandlerAuth<unknown, unknown>, IN> {
    readonly condition: OperationHandlerInputValidationCondition<AUTH, IN>;
    readonly errorMessage: OperationHandlerInputValidationErrorMessage<AUTH, IN>;
    constructor(condition: OperationHandlerInputValidationCondition<AUTH, IN>, errorMessage: OperationHandlerInputValidationErrorMessage<AUTH, IN>);
}
export declare class OperationHandlerInputValidationErrorMessageConfiguration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN> {
    private condition;
    constructor(condition: OperationHandlerInputValidationCondition<AUTH, IN>);
    errorMessage(errorMessage: OperationHandlerInputValidationErrorMessage<AUTH, IN>): OperationHandlerInputValidation<AUTH, IN>;
}
export declare class OperationHandlerInputValidationConditionConfiguration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN> {
    condition(condition: OperationHandlerInputValidationCondition<AUTH, IN>): OperationHandlerInputValidationErrorMessageConfiguration<AUTH, IN>;
}
export type OperationHandlerInputValidationSetup<AUTH extends OperationHandlerAuth<unknown, unknown>, IN> = (inputValidation: OperationHandlerInputValidationConditionConfiguration<AUTH, IN>) => OperationHandlerInputValidation<AUTH, IN>;
export declare class OperationHandlerOutputValidation<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> {
    readonly condition: OperationHandlerOutputValidationCondition<AUTH, IN, OUT>;
    readonly errorMessage: OperationHandlerOutputValidationErrorMessage<AUTH, IN, OUT>;
    constructor(condition: OperationHandlerOutputValidationCondition<AUTH, IN, OUT>, errorMessage: OperationHandlerOutputValidationErrorMessage<AUTH, IN, OUT>);
}
export declare class OperationHandlerOutputValidationErrorMessageConfiguration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> {
    private condition;
    constructor(condition: OperationHandlerOutputValidationCondition<AUTH, IN, OUT>);
    errorMessage(errorMessage: OperationHandlerOutputValidationErrorMessage<AUTH, IN, OUT>): OperationHandlerOutputValidation<AUTH, IN, OUT>;
}
export declare class OperationHandlerOutputValidationConditionConfiguration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> {
    condition(condition: OperationHandlerOutputValidationCondition<AUTH, IN, OUT>): OperationHandlerOutputValidationErrorMessageConfiguration<AUTH, IN, OUT>;
}
export type OperationHandlerOutputValidationSetup<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> = (outputValidation: OperationHandlerOutputValidationConditionConfiguration<AUTH, IN, OUT>) => OperationHandlerOutputValidation<AUTH, IN, OUT>;
//# sourceMappingURL=OperationHandlerValidation.d.ts.map