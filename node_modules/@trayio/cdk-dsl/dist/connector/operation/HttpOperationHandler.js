"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpOperationHandlerConfiguration = exports.HttpOperationHandlerRequestConfiguration = exports.HttpOperationHandlerResponseConfiguration = exports.HttpOperationHandler = exports.HttpOperationResponse = exports.HttpOperationResponseBuilder = exports.HttpOperationRequest = exports.HttpOperationRequestBuilder = void 0;
const Http_1 = require("@trayio/commons/http/Http");
const BufferExtensions_1 = require("@trayio/commons/buffer/BufferExtensions");
const fs = __importStar(require("fs"));
const pathLib = __importStar(require("path"));
const O = __importStar(require("fp-ts/Option"));
const OperationHandler_1 = require("./OperationHandler");
// TODO: move to TTM
const readJsonFile = (jsonFilePath) => JSON.parse(fs.readFileSync(jsonFilePath, 'utf8'));
// TODO: move to TTM
const readPackageVersion = () => {
    const packageJsonPath = pathLib.normalize(pathLib.join(__dirname, '../../../package.json'));
    const packageJson = readJsonFile(packageJsonPath);
    return packageJson.version;
};
const packageVersion = readPackageVersion();
class HttpOperationRequestBuilder {
    path;
    method;
    request;
    constructor(method, path, request) {
        this.method = method;
        this.path = path;
        this.request = request;
    }
    withBodyAsJson(body) {
        const contentType = Http_1.HttpContentType.Json;
        const requestWithHeader = this.addHeader(Http_1.HttpHeader.ContentType, contentType);
        return new HttpOperationRequest(requestWithHeader.path, requestWithHeader.method, requestWithHeader.request, O.some(contentType), body);
    }
    withBodyAsText(body) {
        const contentType = Http_1.HttpContentType.Text;
        const requestWithHeader = this.addHeader(Http_1.HttpHeader.ContentType, contentType);
        return new HttpOperationRequest(requestWithHeader.path, requestWithHeader.method, requestWithHeader.request, O.some(contentType), body);
    }
    withBodyAsFormUrlEncoded(body) {
        const contentType = Http_1.HttpContentType.FormUrlEncoded;
        const requestWithHeader = this.addHeader(Http_1.HttpHeader.ContentType, contentType);
        return new HttpOperationRequest(requestWithHeader.path, requestWithHeader.method, requestWithHeader.request, O.some(contentType), body);
    }
    withBodyAsMultipart(body) {
        const contentType = Http_1.HttpContentType.MultipartRequestBody;
        const requestWithHeader = this.addHeader(Http_1.HttpHeader.ContentType, contentType);
        return new HttpOperationRequest(requestWithHeader.path, requestWithHeader.method, requestWithHeader.request, O.some(contentType), body);
    }
    withBodyAsFile(file) {
        const contentType = Http_1.HttpContentType.OctetStream;
        const requestWithHeader = this.addHeader(Http_1.HttpHeader.ContentType, contentType);
        return new HttpOperationRequest(requestWithHeader.path, requestWithHeader.method, requestWithHeader.request, O.some(contentType), file);
    }
    withoutBody() {
        return new HttpOperationRequest(this.path, this.method, this.request, O.none, undefined);
    }
    addPathParameter(name, value) {
        return new HttpOperationRequestBuilder(this.method, this.path, {
            ...this.request,
            pathParams: {
                ...this.request.pathParams,
                [name]: value,
            },
        });
    }
    addQueryString(name, value) {
        return new HttpOperationRequestBuilder(this.method, this.path, {
            ...this.request,
            queryString: {
                ...this.request.queryString,
                [name]: value,
            },
        });
    }
    withMethod(method) {
        return new HttpOperationRequestBuilder(method, this.path, this.request);
    }
    withUrl(url) {
        return new HttpOperationRequestBuilder(this.method, url, this.request);
    }
    withBearerToken(token) {
        return this.addHeader(Http_1.HttpHeader.Authorization, `Bearer ${token}`);
    }
    addHeader(name, value) {
        return new HttpOperationRequestBuilder(this.method, this.path, {
            ...this.request,
            headers: {
                ...this.request.headers,
                [name]: value,
            },
        });
    }
}
exports.HttpOperationRequestBuilder = HttpOperationRequestBuilder;
class HttpOperationRequest {
    path;
    method;
    request;
    contentType;
    body;
    constructor(path, method, request, contentType, body) {
        this.path = path;
        this.method = method;
        this.request = request;
        this.contentType = contentType;
        this.body = body;
    }
}
exports.HttpOperationRequest = HttpOperationRequest;
class HttpOperationResponseBuilder {
    response;
    errorHandling;
    errorContentType;
    constructor(response, errorHandling, errorContentType) {
        this.response = response;
        this.errorHandling = errorHandling;
        this.errorContentType = errorContentType;
    }
    getStatusCode() {
        return this.response.statusCode;
    }
    getHeader(name) {
        return this.response.headers[name];
    }
    getHeaders() {
        return this.response.headers;
    }
    withErrorHandling(errorHandling) {
        return new HttpOperationResponseBuilder(this.response, errorHandling, O.none);
    }
    withJsonErrorHandling(errorHandling) {
        return new HttpOperationResponseBuilder(this.response, errorHandling, O.some(Http_1.HttpContentType.Json));
    }
    parseWithoutBody(responseParser) {
        return new HttpOperationResponse(this.response, this.errorHandling, this.errorContentType, O.none, responseParser);
    }
    parseWithBodyAsText(responseParser) {
        return new HttpOperationResponse(this.response, this.errorHandling, this.errorContentType, O.some(Http_1.HttpContentType.Text), responseParser);
    }
    parseWithBodyAsJson(responseParser = (body) => OperationHandler_1.OperationHandlerResult.success(body)) {
        return new HttpOperationResponse(this.response, this.errorHandling, this.errorContentType, O.some(Http_1.HttpContentType.Json), responseParser);
    }
    parseWithBodyAsFile(responseParser) {
        return new HttpOperationResponse(this.response, this.errorHandling, this.errorContentType, O.some(Http_1.HttpContentType.OctetStream), responseParser);
    }
}
exports.HttpOperationResponseBuilder = HttpOperationResponseBuilder;
class HttpOperationResponse {
    response;
    errorHandling;
    contentType;
    responseParser;
    errorContentType;
    constructor(response, errorHandling, errorContentType, contentType, responseParser) {
        this.errorContentType = errorContentType;
        this.response = response;
        this.errorHandling = errorHandling;
        this.contentType = contentType;
        this.responseParser = responseParser;
    }
}
exports.HttpOperationResponse = HttpOperationResponse;
class HttpOperationHandler {
    _tag = 'HttpOperationHandler';
    request;
    requestHandler;
    responseHandler;
    constructor(request, requestHandler, responseHandler) {
        this.request = request;
        this.requestHandler = requestHandler;
        this.responseHandler = responseHandler;
    }
}
exports.HttpOperationHandler = HttpOperationHandler;
class HttpOperationHandlerResponseConfiguration {
    request;
    requestHandler;
    constructor(request, requestHandler) {
        this.request = request;
        this.requestHandler = requestHandler;
    }
    handleResponse(responseHandler) {
        return new HttpOperationHandler(this.request, this.requestHandler, responseHandler);
    }
}
exports.HttpOperationHandlerResponseConfiguration = HttpOperationHandlerResponseConfiguration;
class HttpOperationHandlerRequestConfiguration {
    request;
    constructor(request) {
        this.request = request;
    }
    handleRequest(requestHandler) {
        return new HttpOperationHandlerResponseConfiguration(this.request, requestHandler);
    }
}
exports.HttpOperationHandlerRequestConfiguration = HttpOperationHandlerRequestConfiguration;
class HttpOperationHandlerConfiguration {
    get(path) {
        return new HttpOperationHandlerRequestConfiguration(this.initialRequest(Http_1.HttpMethod.Get, path));
    }
    post(path) {
        return new HttpOperationHandlerRequestConfiguration(this.initialRequest(Http_1.HttpMethod.Post, path));
    }
    put(path) {
        return new HttpOperationHandlerRequestConfiguration(this.initialRequest(Http_1.HttpMethod.Put, path));
    }
    patch(path) {
        return new HttpOperationHandlerRequestConfiguration(this.initialRequest(Http_1.HttpMethod.Patch, path));
    }
    delete(path) {
        return new HttpOperationHandlerRequestConfiguration(this.initialRequest(Http_1.HttpMethod.Delete, path));
    }
    initialRequest(method, path) {
        return new HttpOperationRequestBuilder(method, path, {
            headers: {
                [Http_1.HttpHeader.UserAgent]: `TrayioCDK/${packageVersion}`,
            },
            pathParams: {},
            queryString: {},
            body: BufferExtensions_1.BufferExtensions.arrayBufferToReadable(new ArrayBuffer(0)),
        });
    }
}
exports.HttpOperationHandlerConfiguration = HttpOperationHandlerConfiguration;
