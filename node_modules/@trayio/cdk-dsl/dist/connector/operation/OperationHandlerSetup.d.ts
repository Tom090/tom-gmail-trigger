import * as O from 'fp-ts/Option';
import { DynamicObject } from '@trayio/commons/dynamictype/DynamicType';
import { CompositeOperationHandler, CompositeOperationHandlerFunction } from './CompositeOperationHandler';
import { HttpOperationHandler, HttpOperationHandlerSetup } from './HttpOperationHandler';
import { OperationHandlerValidation, OperationHandlerInputValidationSetup, OperationHandlerOutputValidationSetup } from './OperationHandlerValidation';
import { OperationHandlerAuth, OperationHandlerReference, OperationHandlerType, TriggerOperationHttpResponse, TriggerRequestOperationInput, TriggerRequestOperationOutput, TriggerResponseOperationInput } from './OperationHandler';
import { OperationGlobalConfigHttp } from './OperationGlobalConfig';
export type OperationHandlerImplementation<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> = HttpOperationHandler<AUTH, IN, OUT> | CompositeOperationHandler<AUTH, IN, OUT>;
export declare class OperationHandler<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> {
    readonly name: string;
    readonly handlerType: OperationHandlerType;
    readonly isPrivate: boolean;
    readonly validation: O.Option<OperationHandlerValidation<AUTH, IN, OUT>>;
    readonly implementation: OperationHandlerImplementation<AUTH, IN, OUT>;
    readonly globalConfiguration: O.Option<OperationGlobalConfigHttp<AUTH>>;
    constructor(name: string, handlerType: OperationHandlerType, isPrivate: boolean, validation: O.Option<OperationHandlerValidation<AUTH, IN, OUT>>, implementation: OperationHandlerImplementation<AUTH, IN, OUT>, globalConfiguration: O.Option<OperationGlobalConfigHttp<AUTH>>);
}
export declare class OperationHandlerConfiguration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> {
    static withNameAndHandlerType<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT>(name: string, handlerType: OperationHandlerType): OperationHandlerConfiguration<AUTH, IN, OUT>;
    private name;
    private handlerType;
    private isPrivate;
    private validation;
    private globalConfiguration;
    private constructor();
    private(): OperationHandlerConfiguration<AUTH, IN, OUT>;
    addInputValidation(inputValidationSetup: OperationHandlerInputValidationSetup<AUTH, IN>): OperationHandlerConfiguration<AUTH, IN, OUT>;
    withGlobalConfiguration(operationGlobalConfig: OperationGlobalConfigHttp<AUTH>): OperationHandlerConfiguration<AUTH, IN, OUT>;
    addOutputValidation(outputValidationSetup: OperationHandlerOutputValidationSetup<AUTH, IN, OUT>): OperationHandlerConfiguration<AUTH, IN, OUT>;
    usingHttp(httpSetup: HttpOperationHandlerSetup<AUTH, IN, OUT>): OperationHandler<AUTH, IN, OUT>;
    usingComposite(compositeFunction: CompositeOperationHandlerFunction<AUTH, IN, OUT>): OperationHandler<AUTH, IN, OUT>;
}
export declare class OperationHandlerRegistry {
    private static instance;
    static register<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT>(handler: OperationHandler<AUTH, IN, OUT>): void;
    static resolve<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT>(reference: OperationHandlerReference<AUTH, IN, OUT>): O.Option<OperationHandler<AUTH, IN, OUT>>;
    private registry;
    private constructor();
    private register;
    private resolve;
}
export type OperationHandlerSetup<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> = (handler: OperationHandlerConfiguration<AUTH, IN, OUT>) => OperationHandler<AUTH, IN, OUT>;
export interface OperationHandlerSetupInterface {
    configureHandler: <AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT>(handlerSetup: OperationHandlerSetup<AUTH, IN, OUT>) => OperationHandlerReference<AUTH, IN, OUT>;
    configureTriggerCreateHandler: <AUTH extends OperationHandlerAuth<unknown, unknown>, IN>(handlerSetup: OperationHandlerSetup<AUTH, IN, DynamicObject>) => OperationHandlerReference<AUTH, IN, DynamicObject>;
    configureTriggerDestroyHandler: <AUTH extends OperationHandlerAuth<unknown, unknown>, IN>(handlerSetup: OperationHandlerSetup<AUTH, IN, DynamicObject>) => OperationHandlerReference<AUTH, IN, DynamicObject>;
    configureTriggerRequestHandler: <AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT>(handlerSetup: OperationHandlerSetup<AUTH, TriggerRequestOperationInput<IN>, TriggerRequestOperationOutput<OUT>>) => OperationHandlerReference<AUTH, TriggerRequestOperationInput<IN>, TriggerRequestOperationOutput<OUT>>;
    configureTriggerResponseHandler: <AUTH extends OperationHandlerAuth<unknown, unknown>, IN, RES>(handlerSetup: OperationHandlerSetup<AUTH, TriggerResponseOperationInput<IN, RES>, TriggerOperationHttpResponse>) => OperationHandlerReference<AUTH, TriggerResponseOperationInput<IN, RES>, TriggerOperationHttpResponse>;
}
export type OperationDescriptor = {
    name: string;
    title: string;
    description?: string;
};
export declare const OperationHandlerSetup: OperationHandlerSetupInterface;
//# sourceMappingURL=OperationHandlerSetup.d.ts.map