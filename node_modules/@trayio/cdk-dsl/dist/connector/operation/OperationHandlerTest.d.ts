import * as O from 'fp-ts/Option';
import { OperationHandlerAuth, OperationHandlerContext, OperationHandlerReference, OperationHandlerResult } from './OperationHandler';
import { OperationHandlerInvocation } from './OperationHandlerInvocation';
export type OperationHandlerTestCaseResult<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX, TCCTX> = {
    ctx: OperationHandlerContext<AUTH>;
    testContext: TCTX;
    testCaseContext: TCCTX;
    input: IN;
    output: OperationHandlerResult<OUT>;
};
export type OperationHandlerTestCaseFinallyFunction<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX, TCCTX> = (testCaseResult: OperationHandlerTestCaseResult<AUTH, IN, OUT, TCTX, TCCTX>, invoke: OperationHandlerInvocation<AUTH>) => Promise<OperationHandlerResult<undefined>>;
export type OperationHandlerTestCaseThenFunction<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX, TCCTX> = (testCaseResult: OperationHandlerTestCaseResult<AUTH, IN, OUT, TCTX, TCCTX>) => void;
export type OperationHandlerTestCaseWhenFunction<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, TCTX, TCCTX> = (ctx: OperationHandlerContext<AUTH>, testContext: TCTX, testCaseContext: TCCTX) => IN;
export type OperationHandlerTestCaseGivenFunction<AUTH extends OperationHandlerAuth<unknown, unknown>, TCTX, TCCTX> = (ctx: OperationHandlerContext<AUTH>, testContext: TCTX, invoke: OperationHandlerInvocation<AUTH>) => Promise<OperationHandlerResult<TCCTX>>;
export declare class OperationHandlerTestCase<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX, TCCTX> {
    description: string;
    ctx: OperationHandlerContext<AUTH>;
    testContext: TCTX;
    givenFunction: OperationHandlerTestCaseGivenFunction<AUTH, TCTX, TCCTX>;
    whenFunction: OperationHandlerTestCaseWhenFunction<AUTH, IN, TCTX, TCCTX>;
    thenFunction: OperationHandlerTestCaseThenFunction<AUTH, IN, OUT, TCTX, TCCTX>;
    finallyFunction: OperationHandlerTestCaseFinallyFunction<AUTH, IN, OUT, TCTX, TCCTX>;
    constructor(description: string, ctx: OperationHandlerContext<AUTH>, testContext: TCTX, givenFunction: OperationHandlerTestCaseGivenFunction<AUTH, TCTX, TCCTX>, whenFunction: OperationHandlerTestCaseWhenFunction<AUTH, IN, TCTX, TCCTX>, thenFunction: OperationHandlerTestCaseThenFunction<AUTH, IN, OUT, TCTX, TCCTX>, finallyFunction: OperationHandlerTestCaseFinallyFunction<AUTH, IN, OUT, TCTX, TCCTX>);
}
export declare class OperationHandlerTestCaseFinallyConfiguration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX, TCCTX> {
    private description;
    private ctx;
    private testContext;
    private givenFunction;
    private whenFunction;
    private thenFunction;
    constructor(description: string, ctx: OperationHandlerContext<AUTH>, testContext: TCTX, givenFunction: OperationHandlerTestCaseGivenFunction<AUTH, TCTX, TCCTX>, whenFunction: OperationHandlerTestCaseWhenFunction<AUTH, IN, TCTX, TCCTX>, thenFunction: OperationHandlerTestCaseThenFunction<AUTH, IN, OUT, TCTX, TCCTX>);
    finally(finallyFunction: OperationHandlerTestCaseFinallyFunction<AUTH, IN, OUT, TCTX, TCCTX>): OperationHandlerTestCase<AUTH, IN, OUT, TCTX, TCCTX>;
    finallyDoNothing(): OperationHandlerTestCase<AUTH, IN, OUT, TCTX, TCCTX>;
}
export declare class OperationHandlerTestCaseThenConfiguration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX, TCCTX> {
    private description;
    private ctx;
    private testContext;
    private givenFunction;
    private whenFunction;
    constructor(description: string, ctx: OperationHandlerContext<AUTH>, testContext: TCTX, givenFunction: OperationHandlerTestCaseGivenFunction<AUTH, TCTX, TCCTX>, whenFunction: OperationHandlerTestCaseWhenFunction<AUTH, IN, TCTX, TCCTX>);
    then(thenFunction: OperationHandlerTestCaseThenFunction<AUTH, IN, OUT, TCTX, TCCTX>): OperationHandlerTestCaseFinallyConfiguration<AUTH, IN, OUT, TCTX, TCCTX>;
}
export declare class OperationHandlerTestCaseWhenConfiguration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX, TCCTX> {
    private description;
    private ctx;
    private testContext;
    private givenFunction;
    constructor(description: string, ctx: OperationHandlerContext<AUTH>, testContext: TCTX, givenFunction: OperationHandlerTestCaseGivenFunction<AUTH, TCTX, TCCTX>);
    when(whenFunction: OperationHandlerTestCaseWhenFunction<AUTH, IN, TCTX, TCCTX>): OperationHandlerTestCaseThenConfiguration<AUTH, IN, OUT, TCTX, TCCTX>;
}
export declare class OperationHandlerTestCaseGivenConfiguration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX> {
    private description;
    private ctx;
    private testContext;
    constructor(description: string, ctx: OperationHandlerContext<AUTH>, testContext: TCTX);
    given<TCCTX>(givenFunction: OperationHandlerTestCaseGivenFunction<AUTH, TCTX, TCCTX>): OperationHandlerTestCaseWhenConfiguration<AUTH, IN, OUT, TCTX, TCCTX>;
    givenNothing(): OperationHandlerTestCaseWhenConfiguration<AUTH, IN, OUT, TCTX, {}>;
}
export declare class OperationHandlerTestCaseAuthConfiguration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX> {
    private description;
    private defaultCtx;
    private testContext;
    constructor(description: string, defaultCtx: OperationHandlerContext<AUTH>, testContext: TCTX);
    usingHandlerContext(ctxName: string): OperationHandlerTestCaseGivenConfiguration<AUTH, IN, OUT, TCTX>;
    given<TCCTX>(givenFunction: OperationHandlerTestCaseGivenFunction<AUTH, TCTX, TCCTX>): OperationHandlerTestCaseWhenConfiguration<AUTH, IN, OUT, TCTX, TCCTX>;
    givenNothing(): OperationHandlerTestCaseWhenConfiguration<AUTH, IN, OUT, TCTX, {}>;
}
export type OperationHandlerTestCaseSetup<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX, TCCTX> = (testCase: OperationHandlerTestCaseAuthConfiguration<AUTH, IN, OUT, TCTX>) => OperationHandlerTestCase<AUTH, IN, OUT, TCTX, TCCTX>;
export type OperationHandlerTestAfterAllFunction<AUTH extends OperationHandlerAuth<unknown, unknown>, TCTX> = (ctx: OperationHandlerContext<AUTH>, testContext: TCTX, invoke: OperationHandlerInvocation<AUTH>) => Promise<OperationHandlerResult<undefined>>;
export type OperationHandlerTestBeforeAllFunction<AUTH extends OperationHandlerAuth<unknown, unknown>, TCTX> = (ctx: OperationHandlerContext<AUTH>, invoke: OperationHandlerInvocation<AUTH>) => Promise<OperationHandlerResult<TCTX>>;
export declare class OperationHandlerTestCaseFactory<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX, TCCTX> {
    description: string;
    private ctx;
    private testCaseSetup;
    constructor(description: string, ctx: OperationHandlerContext<AUTH>, testCaseSetup: OperationHandlerTestCaseSetup<AUTH, IN, OUT, TCTX, TCCTX>);
    testCase(testContext: TCTX): OperationHandlerTestCase<AUTH, IN, OUT, TCTX, TCCTX>;
}
export declare class OperationHandlerTest<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX> {
    handlerReference: OperationHandlerReference<AUTH, IN, OUT>;
    ctx: OperationHandlerContext<AUTH>;
    beforeAllFunction: OperationHandlerTestBeforeAllFunction<AUTH, TCTX>;
    testCaseFactories: Array<OperationHandlerTestCaseFactory<AUTH, IN, OUT, TCTX, unknown>>;
    afterAllFunction: OperationHandlerTestAfterAllFunction<AUTH, TCTX>;
    constructor(handlerReference: OperationHandlerReference<AUTH, IN, OUT>, ctx: OperationHandlerContext<AUTH>, beforeAllFunction: OperationHandlerTestBeforeAllFunction<AUTH, TCTX>, testCaseFactories: Array<OperationHandlerTestCaseFactory<AUTH, IN, OUT, TCTX, unknown>>, afterAllFunction: OperationHandlerTestAfterAllFunction<AUTH, TCTX>);
}
export declare class OperationHandlerTestAfterAllConfiguration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX> {
    private handlerReference;
    private ctx;
    private beforeAllFunction;
    private testCaseFactories;
    constructor(handlerReference: OperationHandlerReference<AUTH, IN, OUT>, ctx: OperationHandlerContext<AUTH>, beforeAllFunction: OperationHandlerTestBeforeAllFunction<AUTH, TCTX>, testCaseFactories: Array<OperationHandlerTestCaseFactory<AUTH, IN, OUT, TCTX, unknown>>);
    testCase<TCCTX>(description: string, testCaseSetup: OperationHandlerTestCaseSetup<AUTH, IN, OUT, TCTX, TCCTX>): OperationHandlerTestAfterAllConfiguration<AUTH, IN, OUT, TCTX>;
    afterAll(afterAllFunction: OperationHandlerTestAfterAllFunction<AUTH, TCTX>): OperationHandlerTest<AUTH, IN, OUT, TCTX>;
    nothingAfterAll(): OperationHandlerTest<AUTH, IN, OUT, TCTX>;
}
export declare class OperationHandlerTestMandatoryTestCaseConfiguration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX> {
    private handlerReference;
    private ctx;
    private beforeAllFunction;
    constructor(handlerReference: OperationHandlerReference<AUTH, IN, OUT>, ctx: OperationHandlerContext<AUTH>, beforeAllFunction: OperationHandlerTestBeforeAllFunction<AUTH, TCTX>);
    testCase<TCCTX>(description: string, testCaseSetup: OperationHandlerTestCaseSetup<AUTH, IN, OUT, TCTX, TCCTX>): OperationHandlerTestAfterAllConfiguration<AUTH, IN, OUT, TCTX>;
}
export declare class OperationHandlerTestBeforeAllConfiguration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> {
    private handlerReference;
    private ctx;
    constructor(handlerReference: OperationHandlerReference<AUTH, IN, OUT>, ctx: OperationHandlerContext<AUTH>);
    beforeAll<TCTX>(beforeAllFunction: OperationHandlerTestBeforeAllFunction<AUTH, TCTX>): OperationHandlerTestMandatoryTestCaseConfiguration<AUTH, IN, OUT, TCTX>;
    nothingBeforeAll(): OperationHandlerTestMandatoryTestCaseConfiguration<AUTH, IN, OUT, {}>;
}
export declare class OperationHandlerTestAuthConfiguration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> {
    private handlerReference;
    constructor(handlerReference: OperationHandlerReference<AUTH, IN, OUT>);
    usingHandlerContext(ctxName: string): OperationHandlerTestBeforeAllConfiguration<AUTH, IN, OUT>;
}
export type OperationHandlerTestRegistryOnRegistrationFunction<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> = (reference: OperationHandlerReference<AUTH, IN, OUT>) => void;
export declare class OperationHandlerTestRegistry {
    private static instance;
    static register<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX>(handlerTest: OperationHandlerTest<AUTH, IN, OUT, TCTX>): void;
    static resolve<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT>(reference: OperationHandlerReference<AUTH, IN, OUT>): O.Option<OperationHandlerTest<AUTH, IN, OUT, unknown>>;
    static onRegistration<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT>(onRegistrationFunction: OperationHandlerTestRegistryOnRegistrationFunction<AUTH, IN, OUT>): void;
    private registry;
    private observers;
    private constructor();
    private register;
    private resolve;
    private onRegistration;
}
export type OperationHandlerTestSetup<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX> = (handlerTest: OperationHandlerTestAuthConfiguration<AUTH, IN, OUT>) => OperationHandlerTest<AUTH, IN, OUT, TCTX>;
export interface OperationHandlerTestSetupInterface {
    configureHandlerTest: <AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT, TCTX>(handlerReference: OperationHandlerReference<AUTH, IN, OUT>, handlerTestSetup: OperationHandlerTestSetup<AUTH, IN, OUT, TCTX>) => void;
}
export declare const OperationHandlerTestSetup: OperationHandlerTestSetupInterface;
//# sourceMappingURL=OperationHandlerTest.d.ts.map