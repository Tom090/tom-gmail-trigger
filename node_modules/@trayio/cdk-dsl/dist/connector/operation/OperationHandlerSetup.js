"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationHandlerSetup = exports.OperationHandlerRegistry = exports.OperationHandlerConfiguration = exports.OperationHandler = void 0;
const O = __importStar(require("fp-ts/Option"));
const function_1 = require("fp-ts/function");
const pathLib = __importStar(require("path"));
const DynamicType_1 = require("@trayio/commons/dynamictype/DynamicType");
const CallSite_1 = require("@trayio/commons/callsite/CallSite");
const CompositeOperationHandler_1 = require("./CompositeOperationHandler");
const HttpOperationHandler_1 = require("./HttpOperationHandler");
const OperationHandlerValidation_1 = require("./OperationHandlerValidation");
const OperationHandler_1 = require("./OperationHandler");
class OperationHandler {
    name;
    handlerType;
    isPrivate;
    validation;
    implementation;
    globalConfiguration;
    constructor(name, handlerType, isPrivate, validation, implementation, globalConfiguration) {
        this.name = name;
        this.handlerType = handlerType;
        this.isPrivate = isPrivate;
        this.validation = validation;
        this.implementation = implementation;
        this.globalConfiguration = globalConfiguration;
    }
}
exports.OperationHandler = OperationHandler;
class OperationHandlerConfiguration {
    static withNameAndHandlerType(name, handlerType) {
        return new OperationHandlerConfiguration(name, handlerType, false, O.none, O.none);
    }
    name;
    handlerType;
    isPrivate;
    validation;
    globalConfiguration;
    constructor(name, handlerType, isPrivate, validation, globalConfiguration) {
        this.name = name;
        this.handlerType = handlerType;
        this.isPrivate = isPrivate;
        this.validation = validation;
        this.globalConfiguration = globalConfiguration;
    }
    private() {
        return new OperationHandlerConfiguration(this.name, this.handlerType, true, this.validation, this.globalConfiguration);
    }
    addInputValidation(inputValidationSetup) {
        const currentValidation = O.getOrElse(() => OperationHandlerValidation_1.OperationHandlerValidation.emptyValidation())(this.validation);
        const inputValidation = inputValidationSetup(new OperationHandlerValidation_1.OperationHandlerInputValidationConditionConfiguration());
        const newValidation = currentValidation.addInputValidation(inputValidation);
        return new OperationHandlerConfiguration(this.name, this.handlerType, this.isPrivate, O.some(newValidation), O.none);
    }
    withGlobalConfiguration(operationGlobalConfig) {
        return new OperationHandlerConfiguration(this.name, this.handlerType, this.isPrivate, this.validation, O.some(operationGlobalConfig));
    }
    addOutputValidation(outputValidationSetup) {
        const currentValidation = O.getOrElse(() => OperationHandlerValidation_1.OperationHandlerValidation.emptyValidation())(this.validation);
        const outputValidation = outputValidationSetup(new OperationHandlerValidation_1.OperationHandlerOutputValidationConditionConfiguration());
        const newValidation = currentValidation.addOutputValidation(outputValidation);
        return new OperationHandlerConfiguration(this.name, this.handlerType, this.isPrivate, O.some(newValidation), O.none);
    }
    usingHttp(httpSetup) {
        return new OperationHandler(this.name, this.handlerType, this.isPrivate, this.validation, httpSetup(new HttpOperationHandler_1.HttpOperationHandlerConfiguration()), this.globalConfiguration);
    }
    usingComposite(compositeFunction) {
        return new OperationHandler(this.name, this.handlerType, this.isPrivate, this.validation, new CompositeOperationHandler_1.CompositeOperationHandler(compositeFunction), O.none);
    }
}
exports.OperationHandlerConfiguration = OperationHandlerConfiguration;
class OperationHandlerRegistry {
    static instance = new OperationHandlerRegistry();
    static register(handler) {
        return OperationHandlerRegistry.instance.register(handler);
    }
    static resolve(reference) {
        return OperationHandlerRegistry.instance.resolve(reference);
    }
    registry;
    constructor() {
        this.registry = new Map();
    }
    register(handler) {
        this.registry.set(handler.name, handler);
    }
    resolve(reference) {
        const handler = this.registry.get(reference.name);
        if (!handler) {
            return O.none;
        }
        return O.some(handler);
    }
}
exports.OperationHandlerRegistry = OperationHandlerRegistry;
const readOperationDescriptorFile = () => {
    const operationDescriptorOpt = (0, function_1.pipe)(O.fromNullable(CallSite_1.CallSite.getCurrentCallSites()[1]), // skip the last caller because it is a function within this file
    O.map((caller) => pathLib.join(caller.folderPath, 'operation.json')), O.chain((operationDescriptorPath) => O.fromEither(DynamicType_1.DynamicType.readFromFile(operationDescriptorPath))));
    // If this error is thrown, there is a problem with the file or there is a problem with the runtime not supporting callsites
    const operationDescriptor = O.getOrElse(() => {
        throw new Error('Runtime error: Cannot read operation.json file');
    })(operationDescriptorOpt);
    return operationDescriptor;
};
exports.OperationHandlerSetup = {
    configureHandler: (handlerSetup) => {
        const descriptor = readOperationDescriptorFile();
        const { name } = descriptor;
        const handler = handlerSetup(OperationHandlerConfiguration.withNameAndHandlerType(name, OperationHandler_1.OperationHandlerType.Regular));
        OperationHandlerRegistry.register(handler);
        return {
            name: handler.name,
        };
    },
    configureTriggerCreateHandler: (handlerSetup) => {
        const descriptor = readOperationDescriptorFile();
        const { name } = descriptor;
        const handler = handlerSetup(OperationHandlerConfiguration.withNameAndHandlerType(name, OperationHandler_1.OperationHandlerType.TriggerCreate));
        OperationHandlerRegistry.register(handler);
        return {
            name: handler.name,
        };
    },
    configureTriggerDestroyHandler: (handlerSetup) => {
        const descriptor = readOperationDescriptorFile();
        const { name } = descriptor;
        const handler = handlerSetup(OperationHandlerConfiguration.withNameAndHandlerType(`${name}_destroy`, OperationHandler_1.OperationHandlerType.TriggerDestroy));
        OperationHandlerRegistry.register(handler);
        return {
            name: handler.name,
        };
    },
    configureTriggerRequestHandler: (handlerSetup) => {
        const descriptor = readOperationDescriptorFile();
        const { name } = descriptor;
        const handler = handlerSetup(OperationHandlerConfiguration.withNameAndHandlerType(`${name}_request`, OperationHandler_1.OperationHandlerType.TriggerRequest));
        OperationHandlerRegistry.register(handler);
        return { name: handler.name };
    },
    configureTriggerResponseHandler: (handlerSetup) => {
        const descriptor = readOperationDescriptorFile();
        const { name } = descriptor;
        const handler = handlerSetup(OperationHandlerConfiguration.withNameAndHandlerType(`${name}_response`, OperationHandler_1.OperationHandlerType.TriggerResponse));
        OperationHandlerRegistry.register(handler);
        return { name: handler.name };
    },
};
