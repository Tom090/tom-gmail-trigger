import { OperationHandlerAuth, OperationHandlerContext, OperationHandlerResult, OperationHandlerType } from '@trayio/cdk-dsl/connector/operation/OperationHandler';
import { CompositeOperationHandler } from '@trayio/cdk-dsl/connector/operation/CompositeOperationHandler';
import { OperationExecution } from './OperationExecution';
import { OperationHandlerInvocationFactory } from './OperationHandlerInvocationFactory';
export declare class CompositeOperationExecution<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> implements OperationExecution<AUTH, IN, OUT> {
    private handlerInvocationFactory;
    private handler;
    handlerType: OperationHandlerType;
    constructor(handlerInvocationFactory: OperationHandlerInvocationFactory, handler: CompositeOperationHandler<AUTH, IN, OUT>, handlerType: OperationHandlerType);
    execute(ctx: OperationHandlerContext<AUTH>, input: IN): Promise<OperationHandlerResult<OUT>>;
    private isError;
}
//# sourceMappingURL=CompositeOperationExecution.d.ts.map