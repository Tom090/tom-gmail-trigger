"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompositeOperationExecution = void 0;
const OperationHandler_1 = require("@trayio/cdk-dsl/connector/operation/OperationHandler");
class CompositeOperationExecution {
    handlerInvocationFactory;
    handler;
    handlerType;
    constructor(handlerInvocationFactory, handler, handlerType) {
        this.handlerInvocationFactory = handlerInvocationFactory;
        this.handler = handler;
        this.handlerType = handlerType;
    }
    async execute(ctx, input) {
        const handlerInvocation = this.handlerInvocationFactory(ctx);
        try {
            const result = await this.handler.handlerFunction(ctx, input, handlerInvocation);
            return result;
        }
        catch (error) {
            if (this.isError(error)) {
                return OperationHandler_1.OperationHandlerResult.failure(OperationHandler_1.OperationHandlerError.connectorError(error.message));
            }
            if (typeof error === 'string') {
                return OperationHandler_1.OperationHandlerResult.failure(OperationHandler_1.OperationHandlerError.connectorError(error));
            }
            return OperationHandler_1.OperationHandlerResult.failure(OperationHandler_1.OperationHandlerError.connectorError('Operation failed with unknown error'));
        }
    }
    // TODO: Move to commons
    isError(error) {
        return (typeof error === 'object' &&
            !Array.isArray(error) &&
            error !== null &&
            error.message !== undefined);
    }
}
exports.CompositeOperationExecution = CompositeOperationExecution;
