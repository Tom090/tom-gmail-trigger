"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationExecutionValidation = void 0;
const OperationHandler_1 = require("@trayio/cdk-dsl/connector/operation/OperationHandler");
class OperationExecutionValidation {
    handlerValidation;
    execution;
    handlerType;
    constructor(handlerValidation, execution) {
        this.handlerValidation = handlerValidation;
        this.execution = execution;
        this.handlerType = execution.handlerType;
    }
    async execute(ctx, input) {
        // TODO Add input schema validation
        const { inputValidation } = this.handlerValidation;
        const inputValidationResult = inputValidation
            .filter((validation) => !validation.condition(ctx, input))
            .map((validation) => validation.errorMessage(ctx, input));
        if (inputValidationResult.length > 0) {
            return OperationHandler_1.OperationHandlerResult.failure(OperationHandler_1.OperationHandlerError.userInputError(inputValidationResult.join(', ')));
        }
        const result = await this.execution.execute(ctx, input);
        switch (result.isFailure) {
            case true:
                return result;
            case false:
                // TODO Add output schema validation
                const { outputValidation } = this.handlerValidation;
                const outputValidationResult = outputValidation
                    .filter((validation) => !validation.condition(ctx, input, result.value))
                    .map((validation) => validation.errorMessage(ctx, input, result.value));
                if (outputValidationResult.length > 0) {
                    return OperationHandler_1.OperationHandlerResult.failure(OperationHandler_1.OperationHandlerError.connectorError(outputValidationResult.join(', ')));
                }
                return result;
        }
    }
}
exports.OperationExecutionValidation = OperationExecutionValidation;
