import * as O from 'fp-ts/Option';
import { OperationHandlerAuth, OperationHandlerContext, OperationHandlerResult, OperationHandlerType } from '@trayio/cdk-dsl/connector/operation/OperationHandler';
import { HttpOperationHandler } from '@trayio/cdk-dsl/connector/operation/HttpOperationHandler';
import { HttpClient } from '@trayio/commons/http/HttpClient';
import { FileStorage } from '@trayio/commons/file/File';
import { OperationGlobalConfigHttp } from '@trayio/cdk-dsl/connector/operation/OperationGlobalConfig';
import { OperationExecution } from './OperationExecution';
export declare class HttpOperationExecution<AUTH extends OperationHandlerAuth<unknown, unknown>, IN, OUT> implements OperationExecution<AUTH, IN, OUT> {
    private jsonSerialization;
    private httpClient;
    private handler;
    private fileStorage;
    private globalConfiguration;
    handlerType: OperationHandlerType;
    constructor(httpClient: HttpClient, fileStorage: FileStorage, handler: HttpOperationHandler<AUTH, IN, OUT>, globalConfiguration: O.Option<OperationGlobalConfigHttp<AUTH>>, handlerType: OperationHandlerType);
    execute(ctx: OperationHandlerContext<AUTH>, input: IN): Promise<OperationHandlerResult<OUT>>;
    private decorateRequest;
    private operationRequestToHttpRequest;
    private serializeAsJson;
    private serializeAsFormUrlEncoded;
    private serializeAsText;
    private serializeAsMultipart;
    private serializeAsFile;
    private serializeEmptyBody;
    private defaultErrorHandling;
    private parseErrorResponse;
    private parseResponse;
    private parseBodyAsJson;
    private parseEmptyBody;
    private parseBodyAsFile;
    private parseBodyAsText;
    private generateUploadOptions;
}
//# sourceMappingURL=HttpOperationExecution.d.ts.map